@page "/customers"
@using CustomerModule.Core.Interfaces
@using CustomerModule.Shared.DTOs
@using CustomerModule.Shared.Models
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager
@inject ILogger<CustomerList> Logger
@inject ToastService ToastService

<PageTitle>Customer List</PageTitle>

<ConfirmDialog 
    IsVisible="@showDeleteDialog"
    Title="@ConfirmDialog.DialogType.Delete.Title"
    Message="Are you sure you want to delete this customer?"
    IconClass="@ConfirmDialog.DialogType.Delete.IconClass"
    ConfirmText="@ConfirmDialog.DialogType.Delete.ConfirmText"
    ConfirmButtonClass="@ConfirmDialog.DialogType.Delete.ConfirmButtonClass"
    OnConfirmCallback="ConfirmDelete"
    OnCancelCallback="CancelDelete" />

<div class="container-fluid px-4">
    <h1 class="mt-4">Customers</h1>
    
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <div>
                <i class="fas fa-users me-1"></i>
                Customer List
            </div>
            <div class="d-flex gap-2">
                <div class="input-group" style="width: 300px;">
                    <input type="text" class="form-control" placeholder="Search customers..." 
                           @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
                    <button class="btn btn-outline-secondary" type="button" @onclick="HandleSearch">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
                <a href="/customers/create" class="btn btn-primary">
                    <i class="fas fa-plus me-1"></i> Add Customer
                </a>
            </div>
        </div>
        <div class="card-body">
            @if (loading)
            {
                <LoadingSpinner Message="Loading customers..." />
            }
            else if (customers == null || !customers.Any())
            {
                <div class="alert alert-info" role="alert">
                    No customers found.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Company</th>
                                <th>Credit Limit</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var customer in customers)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <img src="@(string.IsNullOrEmpty(customer.PhotoUrl) ? "https://via.placeholder.com/40" : customer.PhotoUrl)" 
                                                 class="rounded-circle me-2" alt="@customer.FullName" width="40" height="40" />
                                            @customer.FullName
                                        </div>
                                    </td>
                                    <td>@customer.Email</td>
                                    <td>@customer.Phone</td>
                                    <td>@customer.CompanyName</td>
                                    <td>@customer.CreditLimit.ToString("C")</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="/customers/@customer.Id" class="btn btn-sm btn-info">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a href="/customers/edit/@customer.Id" class="btn btn-sm btn-primary">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteCustomer(customer.Id)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<CustomerDto>? customers;
    private bool loading = true;
    private string searchTerm = "";
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            loading = true;
            var result = await CustomerService.GetAllCustomersAsync();
            customers = result.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading customers");
            ToastService.ShowError("Failed to load customers. Please try again.");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSearch()
    {
        try
        {
            loading = true;
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                await LoadCustomers();
                return;
            }

            var result = await CustomerService.SearchCustomersAsync(searchTerm);
            customers = result.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching customers");
            ToastService.ShowError("Failed to search customers. Please try again.");
        }
        finally
        {
            loading = false;
        }
    }

    private int customerToDeleteId;
    private bool showDeleteDialog;

    private void DeleteCustomer(int id)
    {
        customerToDeleteId = id;
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            await CustomerService.DeleteCustomerAsync(customerToDeleteId);
            await LoadCustomers();
            ToastService.ShowSuccess("Customer deleted successfully.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting customer");
            ToastService.ShowError("Failed to delete customer. Please try again.");
        }
        finally
        {
            showDeleteDialog = false;
        }
    }

    private void CancelDelete()
    {
        showDeleteDialog = false;
        customerToDeleteId = 0;
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}
